{"version":3,"sources":["components/Navigation/Navigation.js","components/Searchbar/Searchbar.js","components/Imagebox/Imagebox.js","components/Card/Card.js","App.js","serviceWorker.js","index.js"],"names":["Navigation","Searchbar","_ref","onInputChange","onClick","react_default","a","createElement","className","type","name","onChange","Imagebox","imageUrl","box","src","alt","id","style","top","right","bottom","left","app","Clarifai","App","apiKey","Card","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","input","e","setState","target","value","response","outputs","data","regions","region_info","bounding_box","img","document","getElementById","width","Number","height","left_col","top_row","right_col","bottom_row","_this2","models","predict","FACE_DETECT_MODEL","then","setbox","calculatefacebox","console","log","catch","err","components_Searchbar_Searchbar","setInput","bind","submit","components_Imagebox_Imagebox","Component","components_Card_Card","Boolean","window","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mTAUeA,kDCGAC,MAVf,SAAAC,GAA4C,IAAxBC,EAAwBD,EAAxBC,cAAcC,EAAUF,EAAVE,QAChC,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACdH,EAAAC,EAAAC,cAAA,SAAOE,KAAK,OAAOC,KAAK,UAAUF,UAAU,cACtCG,SAAYR,IAClBE,EAAAC,EAAAC,cAAA,UAAQH,QAAWA,GAAnB,kBCMUQ,MAXf,SAAAV,GAAkC,IAAfW,EAAeX,EAAfW,SAASC,EAAMZ,EAANY,IAC1B,OACET,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACdH,EAAAC,EAAAC,cAAA,OAAKQ,IAAKF,EAAUG,IAAI,GAAGC,GAAG,QAC9BZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MAAMU,MAAO,CAACC,IAAIL,EAAIK,IAAKC,MAAMN,EAAIM,MAAMC,OAAOP,EAAIO,OAAOC,KAAKR,EAAIQ,mCCCpFC,EAAM,IAAIC,IAASC,IAAI,CAC5BC,OAAQ,qCAkEMC,cA5Dd,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAO,CACXC,MAAO,GACPtB,IAAO,IAJIc,wEAQJS,GACRN,KAAKO,SAAS,CACbF,MAAQC,EAAEE,OAAOC,uCAIX1B,GACPiB,KAAKO,SACL,CACCxB,IAAIA,6CAKW2B,GAChB,IAAM3B,EAAM2B,EAASC,QAAQ,GAAGC,KAAKC,QAAQ,GAAGC,YAAYC,aACtDC,EAAMC,SAASC,eAAe,OAC9BC,EAAQC,OAAOJ,EAAIG,OACnBE,EAAQD,OAAOJ,EAAIK,QAEzB,MAAO,CACN9B,KAAMR,EAAIuC,SAAUH,EACpB/B,IAAKL,EAAIwC,QAASF,EAClBhC,MAAO8B,EAASpC,EAAIyC,UAAUL,EAC9B7B,OAAQ+B,EAAUtC,EAAI0C,WAAWJ,oCAM3B,IAAAK,EAAA1B,KACPR,EAAImC,OAAOC,QAAQnC,IAASoC,kBAAmB7B,KAAKI,MAAMC,OAAOyB,KAAK,SAAApB,GAEtEgB,EAAKK,OAAOL,EAAKM,iBAAiBtB,IAClCuB,QAAQC,IAAIR,EAAKtB,MAAMrB,OACpBoD,MAAM,SAAAC,GAAG,OAAIH,QAAQC,IAAIE,sCAM5B,OAEK9D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACdH,EAAAC,EAAAC,cAAC6D,EAAD,CAAWjE,cAAiB4B,KAAKsC,SAASC,KAAKvC,MAAO3B,QAAW2B,KAAKwC,OAAOD,KAAKvC,QAClF1B,EAAAC,EAAAC,cAACiE,EAAD,CAAU3D,SAAYkB,KAAKI,MAAMC,MAAOtB,IAAOiB,KAAKI,MAAMrB,cAtD/C2D,mBCDJhD,MARf,WACE,OACEpB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACmE,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5E,EAAAC,EAAAC,cAAC2E,EAAD,MAASlC,SAASC,eAAe,SD2H3C,kBAAmBkC,WACrBA,UAAUC,cAAcC,MAAMxB,KAAK,SAAAyB,GACjCA,EAAaC","file":"static/js/main.2c700e8f.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Navigation.css';\r\nfunction Navigation() {\r\n  return (\r\n    <nav className=\"Navigation\">\r\n    \t<button>Sign out</button>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default Navigation;\r\n","import React from 'react';\r\n\r\nimport './Searchbar.css';\r\nfunction Searchbar({onInputChange,onClick}) {\r\n  return (\r\n    <div className='Searchbar'>\r\n    \t<input type='text' name='imgLink' className=\"SearchInput\" \r\n    \t      onChange = {onInputChange}/>\r\n    \t<button onClick = {onClick}>DETECT</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Searchbar;\r\n","import React from 'react';\r\n\r\nimport './Imagebox.css';\r\nfunction Imagebox({imageUrl,box}) {\r\n  return (\r\n    <div className='Imagebox'>\r\n    \t<img src={imageUrl} alt=\"\" id=\"img\"/>\r\n    \t<div className='box' style={{top:box.top ,right:box.right,bottom:box.bottom,left:box.left}}>\r\n    \r\n    </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Imagebox;\r\n","import React,{Component} from 'react';\r\nimport Searchbar from '../Searchbar/Searchbar.js';\r\nimport Imagebox from '../Imagebox/Imagebox.js';\r\n\r\nimport './Card.css';\r\nimport Clarifai from 'clarifai';\r\n\r\n\r\nconst app = new Clarifai.App({\r\n apiKey: 'd6623cd07f904342a07c725fa45d3911'\r\n});\r\n\r\n\r\n\r\nclass Card extends Component{\r\n\tconstructor(){\r\n\t\tsuper();\r\n\t\tthis.state ={\r\n\t\t\tinput :'',\r\n\t\t\tbox   :{}\r\n\t\t}\r\n\t}\r\n\t\r\n\tsetInput(e){\r\n\t\tthis.setState({\r\n\t\t\tinput : e.target.value\r\n\t\t});\t}\r\n\r\n\t\r\n\tsetbox (box){\r\n\t\tthis.setState(\r\n\t\t{\r\n\t\t\tbox:box\r\n\t\t});\r\n\t}\r\n\t\r\n\t\r\n\tcalculatefacebox(response){\r\n\t\tconst box = response.outputs[0].data.regions[0].region_info.bounding_box;\r\n\t\tconst img = document.getElementById(\"img\");\r\n\t\tconst width = Number(img.width);\r\n\t\tconst height =Number(img.height);\r\n\r\n\t\treturn {\r\n\t\t\tleft: box.left_col *width,\r\n\t\t\ttop: box.top_row *height,\r\n\t\t\tright: width - (box.right_col*width),\r\n\t\t\tbottom: height - (box.bottom_row*height),\r\n\t\t}\r\n\r\n\t}\r\n\r\n\r\n\tsubmit(){\r\n\t\tapp.models.predict(Clarifai.FACE_DETECT_MODEL, this.state.input).then(response => { \r\n\r\n\t\tthis.setbox(this.calculatefacebox(response));\r\n\t\tconsole.log(this.state.box);\r\n\t\t}).catch(err => console.log(err));\r\n\t}\r\n\t\r\n\r\n\r\n\trender(){\r\n\t\treturn (\r\n\r\n\t\t\t    <div className='card'>\r\n\t\t\t    \t<Searchbar onInputChange = {this.setInput.bind(this)} onClick = {this.submit.bind(this)}/>\r\n\t\t\t    \t<Imagebox imageUrl = {this.state.input} box = {this.state.box}/>\r\n\t\t\t    \t\r\n\t\t\t    </div>\r\n  );}\r\n  \r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\nimport Navigation from './components/Navigation/Navigation.js';\nimport Card from './components/Card/Card.js';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div>\n      <Card/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}